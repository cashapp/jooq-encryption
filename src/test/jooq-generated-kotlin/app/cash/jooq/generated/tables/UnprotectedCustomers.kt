/*
 * This file is generated by jOOQ.
 */
package app.cash.jooq.generated.tables


import app.cash.jooq.generated.DefaultSchema
import app.cash.jooq.generated.keys.CONSTRAINT_C
import app.cash.jooq.generated.tables.records.UnprotectedCustomersRecord

import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * The table <code>PUBLIC.UNPROTECTED_CUSTOMERS</code>.
 */
@Suppress("UNCHECKED_CAST")
open class UnprotectedCustomers(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UnprotectedCustomersRecord>?,
    parentPath: InverseForeignKey<out Record, UnprotectedCustomersRecord>?,
    aliased: Table<UnprotectedCustomersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UnprotectedCustomersRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>UNPROTECTED_CUSTOMERS</code>
         */
        val UNPROTECTED_CUSTOMERS: UnprotectedCustomers = UnprotectedCustomers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UnprotectedCustomersRecord> = UnprotectedCustomersRecord::class.java

    /**
     * The column <code>UNPROTECTED_CUSTOMERS.CUSTOMER_TOKEN</code>.
     */
    val CUSTOMER_TOKEN: TableField<UnprotectedCustomersRecord, String?> = createField(DSL.name("CUSTOMER_TOKEN"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>UNPROTECTED_CUSTOMERS.CREATED_AT</code>.
     */
    val CREATED_AT: TableField<UnprotectedCustomersRecord, LocalDateTime?> = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>UNPROTECTED_CUSTOMERS.UPDATED_AT</code>.
     */
    val UPDATED_AT: TableField<UnprotectedCustomersRecord, LocalDateTime?> = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>UNPROTECTED_CUSTOMERS.FIRST_NAME</code>.
     */
    val FIRST_NAME: TableField<UnprotectedCustomersRecord, String?> = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>UNPROTECTED_CUSTOMERS.LAST_NAME</code>.
     */
    val LAST_NAME: TableField<UnprotectedCustomersRecord, String?> = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>UNPROTECTED_CUSTOMERS.EMAIL_ADDRESS</code>.
     */
    val EMAIL_ADDRESS: TableField<UnprotectedCustomersRecord, String?> = createField(DSL.name("EMAIL_ADDRESS"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<UnprotectedCustomersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UnprotectedCustomersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UnprotectedCustomersRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>UNPROTECTED_CUSTOMERS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>UNPROTECTED_CUSTOMERS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>UNPROTECTED_CUSTOMERS</code> table reference
     */
    constructor(): this(DSL.name("UNPROTECTED_CUSTOMERS"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<UnprotectedCustomersRecord> = CONSTRAINT_C
    override fun `as`(alias: String): UnprotectedCustomers = UnprotectedCustomers(DSL.name(alias), this)
    override fun `as`(alias: Name): UnprotectedCustomers = UnprotectedCustomers(alias, this)
    override fun `as`(alias: Table<*>): UnprotectedCustomers = UnprotectedCustomers(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UnprotectedCustomers = UnprotectedCustomers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UnprotectedCustomers = UnprotectedCustomers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UnprotectedCustomers = UnprotectedCustomers(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): UnprotectedCustomers = UnprotectedCustomers(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): UnprotectedCustomers = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): UnprotectedCustomers = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): UnprotectedCustomers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): UnprotectedCustomers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): UnprotectedCustomers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): UnprotectedCustomers = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): UnprotectedCustomers = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): UnprotectedCustomers = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): UnprotectedCustomers = where(DSL.notExists(select))
}
