/*
 * This file is generated by jOOQ.
 */
package app.cash.jooq.generated.tables.daos


import app.cash.jooq.generated.tables.ForcedTypeCustomers
import app.cash.jooq.generated.tables.records.ForcedTypeCustomersRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * The table <code>PUBLIC.FORCED_TYPE_CUSTOMERS</code>.
 */
@Suppress("UNCHECKED_CAST")
open class ForcedTypeCustomersDao(configuration: Configuration?) : DAOImpl<ForcedTypeCustomersRecord, app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers, String>(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS, app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers::class.java, configuration) {

    /**
     * Create a new ForcedTypeCustomersDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers): String? = o.customerToken

    /**
     * Fetch records that have <code>CUSTOMER_TOKEN BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCustomerToken(lowerInclusive: String?, upperInclusive: String?): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetchRange(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.CUSTOMER_TOKEN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>CUSTOMER_TOKEN IN (values)</code>
     */
    fun fetchByCustomerToken(vararg values: String): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetch(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.CUSTOMER_TOKEN, *values)

    /**
     * Fetch a unique record that has <code>CUSTOMER_TOKEN = value</code>
     */
    fun fetchOneByCustomerToken(value: String): app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers? = fetchOne(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.CUSTOMER_TOKEN, value)

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetchRange(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: LocalDateTime): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetch(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.CREATED_AT, *values)

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetchRange(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: LocalDateTime): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetch(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.UPDATED_AT, *values)

    /**
     * Fetch records that have <code>FIRST_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String?, upperInclusive: String?): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetchRange(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>FIRST_NAME IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetch(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>LAST_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String?, upperInclusive: String?): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetchRange(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>LAST_NAME IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetch(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.LAST_NAME, *values)

    /**
     * Fetch records that have <code>EMAIL_ADDRESS BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmailAddress(lowerInclusive: String?, upperInclusive: String?): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetchRange(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.EMAIL_ADDRESS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>EMAIL_ADDRESS IN (values)</code>
     */
    fun fetchByEmailAddress(vararg values: String): List<app.cash.jooq.generated.tables.pojos.ForcedTypeCustomers> = fetch(ForcedTypeCustomers.FORCED_TYPE_CUSTOMERS.EMAIL_ADDRESS, *values)
}
